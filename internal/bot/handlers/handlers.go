package handlers

import (
	keyboard "StakemeBotV2/internal/bot/keyboards"
	"StakemeBotV2/internal/bot/users"
	"StakemeBotV2/internal/config"
	"StakemeBotV2/internal/db"
	"database/sql"
	"log"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api"
	"github.com/sirupsen/logrus"
)

const (
	StepMainMenu = iota // –ì–ª–∞–≤–Ω–∞—è –º–µ–Ω—é—à–∫–∞
	StepSubMenu // –ü—Ä–æ–µ–∫—Ç—ã, FAQ
	StepProjectInfo // –¶–µ–Ω–∞ –∑–∞ –ø—Ä–æ–µ–∫—Ç + –∏–Ω—Ñ–∞
	StepPay // –ü–æ–∫—É–ø–∫–∞
)


var main = `üëã –ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç-–ø—Ä–æ–≤–æ–¥–Ω–∏–∫ –ø–æ —Å–æ—Ñ—Ç—É –¥–ª—è –º—É–ª—å—Ç–∏–∞–∫–∫–∏–Ω–≥–∞ –¥—Ä–æ–ø–æ–≤

‚úÖ –°–æ—Ñ—Ç –ø—Ä–æ–≥–æ–Ω—è–µ—Ç –∫–æ—à–µ–ª—å–∫–∏ –ø–æ —Ç–æ–ø–æ–≤—ã–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–º —Ä–µ—Ç—Ä–æ–¥—Ä–æ–ø–∞–º (—Å–ø–∏—Å–æ–∫ –¥–∞–ª—å—à–µ) –≤ —Å–∂–∞—Ç—ã–µ —Å—Ä–æ–∫–∏, –Ω–∞ –Ω–∏–∑–∫–æ–º –≥–∞–∑–µ, –±–µ–∑ –±—Ä–∏—Ç—å—è üöÄ`
type Handlers struct {
	Callbacks map[string]CallbackHandler
	Text      map[string]TextHandler
}

type CallbackHandler func(bot *tgbotapi.BotAPI, update tgbotapi.Update, callbackParametr string, userData *users.User, projects config.Config, dbcon *sql.DB)
type TextHandler     func(bot *tgbotapi.BotAPI, update tgbotapi.Update, userData *users.User)

type CallbackHandlers map[string]CallbackHandler
type TextHandlers     map[string]TextHandler

func LoadCallbackHandlers() CallbackHandlers {
	return CallbackHandlers{
		// –°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤
		"chains": func(bot *tgbotapi.BotAPI, update tgbotapi.Update, callbackParametr string, userData  *users.User, projects config.Config, dbcon *sql.DB) {
			dmsg := tgbotapi.NewDeleteMessage(update.CallbackQuery.Message.Chat.ID, userData.State.MessageID)
			bot.DeleteMessage(dmsg)
			msg := tgbotapi.NewMessage(update.CallbackQuery.Message.Chat.ID, "–°–ø–∏—Å–æ–∫ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤")
			msg.ReplyMarkup = keyboard.ProjectsMenuKeyboard(projects)
			smsg, _ := bot.Send(msg)
			userData.State.MessageID = smsg.MessageID
		},
		// –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–µ–∫—Ç –≤ –∫–æ—Ä–∑–∏–Ω—É
		"uptime": func(bot *tgbotapi.BotAPI, update tgbotapi.Update, callbackParametr string, userData  *users.User, projects config.Config, dbcon *sql.DB) {
			dmsg := tgbotapi.NewDeleteMessage(update.CallbackQuery.Message.Chat.ID, userData.State.MessageID)
			bot.DeleteMessage(dmsg)
			// project := projects[callbackParametr]
			// userData.Items = append(userData.Items, project)
			log.Println(userData)
			
			msg := tgbotapi.NewMessage(update.CallbackQuery.Message.Chat.ID, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–¥—Ä–µ—Å –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞")
			// msg.ReplyMarkup = keyboard.OrderMenuKeyboard()
			smsg, _ := bot.Send(msg)
			userData.State.MessageID = smsg.MessageID
			userData.State.WaitForAddress = true
			userData.State.CurrentChain = callbackParametr
			// db.UpdateUser(dbcon, userData, )
			log.Println(userData)
		},
		// –ü—Ä–∏–Ω—è—Ç—å —Ö–µ—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
		"sendhash": func(bot *tgbotapi.BotAPI, update tgbotapi.Update, callbackParametr string, userData *users.User, projects config.Config, dbcon *sql.DB) {
			// dmsg := tgbotapi.NewDeleteMessage(update.CallbackQuery.Message.Chat.ID, userData.MessageID)
			// bot.DeleteMessage(dmsg)
			msg := tgbotapi.NewMessage(update.CallbackQuery.Message.Chat.ID, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ö–µ—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –Ω–µ–µ")
			smsg, _ := bot.Send(msg)
			userData.State.MessageID = smsg.MessageID
			// userData.Step = StepSubMenu
			// userData.WaitForHash = true
		},
	}
}

func LoadTextHandlers() TextHandlers {
	return TextHandlers{
		"/start": func(bot *tgbotapi.BotAPI, update tgbotapi.Update, userData *users.User) {
			msg := tgbotapi.NewMessage(update.Message.Chat.ID, main)
			msg.ReplyMarkup = keyboard.MainMenuKeyboard()
			smsg, _ := bot.Send(msg)
			userData.State.MessageID = smsg.MessageID
		},	
		"default_message": func(bot *tgbotapi.BotAPI, update tgbotapi.Update, userData *users.User) {
		
		},
	}
}

// func TextMessageHandler(bot *tgbotapi.BotAPI, update tgbotapi.Update, userStates map[int64]*users.User) {
// 	if update.Message == nil || update.Message.Text == "" {
// 		return
// 	}

// 	userID := update.Message.From.ID
// 	text := update.Message.Text

// 	if userState, exists := userStates[int64(userID)]; exists {
// 		userState.SendedHash = text
// 	}
// }

func DefaultMessageHandler(bot *tgbotapi.BotAPI, dbcon *sql.DB, update tgbotapi.Update, userData *users.User, logger *logrus.Logger) {
	log.Println(userData.State.WaitForAddress)
	if userData.State.WaitForAddress {
		// dmsg := tgbotapi.NewDeleteMessage(update.Message.Chat.ID, userData.MessageID)
		// bot.DeleteMessage(dmsg)
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ü–æ–ª—É—á–µ–Ω –∞–¥—Ä–µ—Å")
		// msg.ReplyMarkup = keyboard.SendNotification()
		// bot.Send(msg)
		userData.AddUptimeAlert(userData.State.CurrentChain, update.Message.Text)
		log.Println(userData)
		err := db.UpdateUser(dbcon, userData, logger)
		if err != nil {
			log.Println(err)
		}
		// userData.Step = StepSubMenu
		// userData.WaitForHash = false
		// msg = tgbotapi.NewMessage(384103097, fmt.Sprintf("–Æ–∑–µ—Ä @%s –∫—É–ø–∏–ª —á—Ç–æ-—Ç–æ", update.Message.From.UserName))
		bot.Send(msg)
	}
}